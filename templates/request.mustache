
{{#docs}}/// {{.}}
{{/docs}}
class {{name}} extends streamy.Request {
  static final List<String> KNOWN_PARAMETERS = [
{{#parameters}}    '{{name}}',
{{/parameters}}  ];

  {{#payload}}{{payloadType}} get payload => streamy.internalGetPayload(this);{{/payload}}

  String get httpMethod => '{{httpMethod}}';

  String get pathFormat => '{{path}}';

  bool get hasPayload => {{#payload}}true{{/payload}}{{^payload}}false{{/payload}};

  {{name}}({{topLevelClassName}} root{{#payload}}, {{payloadType}} payloadEntity{{/payload}}) : super(root{{#payload}}, payloadEntity{{/payload}}) {
{{#parameters}}{{#repeated}}    {{varName}} = new {{type}}();
{{/repeated}}{{/parameters}}
  }

  List<String> get pathParameters => const [{{#path_parameters}}'{{name}}',{{/path_parameters}}];
  List<String> get queryParameters => const [{{#query_parameters}}'{{name}}',{{/query_parameters}}];

{{#parameters}}
{{#docs}}  /// {{.}}
{{/docs}}
  {{type}} get {{varName}} => parameters['{{name}}'];

  set {{varName}}({{type}} value) {
    parameters['{{name}}'] = value;
  }
  {{type}} remove{{capVarName}}() => parameters.remove('{{name}}');
{{/parameters}}

  {{^hasSendParams}}Stream{{#hasResponse}}<{{responseType}}>{{/hasResponse}} send() =>
      this.root.send(this);
  StreamSubscription{{#hasResponse}}<{{responseType}}>{{/hasResponse}} listen(void onData({{#hasResponse}}{{responseType}} {{/hasResponse}}event)) =>
      this.root.send(this).listen(onData);{{/hasSendParams}}
  {{#hasSendParams}}Stream{{#hasResponse}}<{{responseType}}>{{/hasResponse}} send({
{{#sendParams}}      {{type}} {{name}}: {{default}}{{^last}},{{/last}}{{#last}} }) { {{/last}}
{{/sendParams}}
{{#sendParams}}
    this.local['{{name}}'] = {{name}};
{{/sendParams}}
    return this.root.transform(new ResultToEntityTransformer()).send(this);
  }
  StreamSubscription{{#hasResponse}}<{{responseType}}>{{/hasResponse}} listen(void onData({{#hasResponse}}{{responseType}} {{/hasResponse}}event), {
{{#sendParams}}      {{type}} {{name}}: {{default}}{{^last}},{{/last}}{{#last}} }) { {{/last}}
{{/sendParams}}
{{#sendParams}}
    this.local['{{name}}'] = {{name}};
{{/sendParams}}
    return this.root.send(this).transform(new ResultToEntityTransformer()).listen(onData);
  }{{/hasSendParams}}
  
  

  {{name}} clone() => streamy.internalCloneFrom(new {{name}}(root{{#payload}}, payload.clone(){{/payload}}), this);

{{#hasResponse}}
  streamy.Deserializer get responseDeserializer => (String str) =>
      new {{responseType}}.fromJsonString(str, typeRegistry: root.typeRegistry);
{{/hasResponse}}
{{^hasResponse}}
  streamy.Deserializer get responseDeserializer => (String str) =>
      new streamy.EmptyEntity();
{{/hasResponse}}
}
