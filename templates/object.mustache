
/// An EntityGlobalFn for {{name}} entities.
typedef dynamic {{name}}GlobalFn({{name}} entity);

{{#docs}}/// {{.}}
{{/docs}}
class {{name}} extends streamy.EntityWrapper {
  static final Map<String, streamy.GlobalRegistration> _globals = <String, streamy.GlobalRegistration>{};

  static final Set<String> KNOWN_PROPERTIES = new Set<String>.from([
{{#properties}}    r'{{raw_name}}',
{{/properties}}  ]);
{{#hasKind}}  static final String KIND = """{{kind}}""";{{/hasKind}}

  static final API_TYPE = r'{{name}}';
  String get apiType => API_TYPE;

  /// Add a global computed synthetic property to this entity type, optionally memoized.
  static void addGlobal(String name, {{name}}GlobalFn computeFn,
      {bool memoize: false, List dependencies: null}) {
    _globals[name] = new streamy.GlobalRegistration(computeFn, dependencies, memoize);
  }

  {{name}}() : super.wrap(new streamy.RawEntity(), (cloned) => new {{name}}._wrap(cloned), globals: _globals);
  {{name}}.fromMap(Map map) : super.wrap(new streamy.RawEntity.fromMap(map), (cloned) => new {{name}}._wrap(cloned), globals: _globals);
  {{name}}.wrapMap(obs.ObservableMap map) : super.wrap(new streamy.RawEntity.wrapMap(map), (cloned) => new {{name}}._wrap(cloned), globals: _globals);

  {{name}}._wrap(streamy.Entity entity) : super.wrap(entity, (cloned) => new {{name}}._wrap(cloned), globals: _globals);

  {{name}}.wrap(streamy.Entity entity, streamy.EntityWrapperCloneFn cloneWrapper) :
      super.wrap(entity, (cloned) => cloneWrapper(cloned), globals: _globals);

{{#properties}}
{{#docs}}  /// {{.}}
{{/docs}}
  {{type}} get {{field_name}} => this[r'{{raw_name}}'];
  set {{field_name}}({{type}} value) {
{{#list}}
    if (value != null && value is! obs.ObservableList) {
      value = new obs.ObservableList.from(value);
    }
{{/list}}
    this[r'{{raw_name}}'] = value;
  }
  {{type}} {{remover_name}}() => remove(r'{{raw_name}}');
{{/properties}}

  factory {{name}}.fromJsonString(String strJson, streamy.Trace trace,
      {streamy.TypeRegistry typeRegistry: streamy.EMPTY_REGISTRY}) =>
          new {{name}}.fromJson(streamy.jsonParse(strJson, trace), typeRegistry: typeRegistry);

  static {{name}} entityFactory(Map json, streamy.TypeRegistry reg) =>
      new {{name}}.fromJson(json, typeRegistry: reg);

  factory {{name}}.fromJson(Map json,
      {streamy.TypeRegistry typeRegistry: streamy.EMPTY_REGISTRY, bool copy: false}) {
    if (json == null) {
      return null;
    }
    if (copy) {
      json = new obs.ObservableMap.from(json);
    }
{{#properties}}
  {{#hasParseExpr}}
    if (json.containsKey(r'{{raw_name}}')) {
      json[r'{{raw_name}}'] = {{parseExpr}}(json[r'{{raw_name}}']);
    }
  {{/hasParseExpr}}
{{/properties}}
    streamy.deserializeUnknown(json, KNOWN_PROPERTIES, typeRegistry);
    return new {{name}}.wrapMap(json);
  }

{{#needsToJson}}
  Map toJson() {
    Map json = super.toJson();
{{#properties}}
  {{#hasToJsonExpr}}
    streamy.serialize(json, r'{{raw_name}}', {{toJsonExpr}});
  {{/hasToJsonExpr}}
{{/properties}}
    return json;
  }
{{/needsToJson}}

  {{name}} clone() => super.clone();
  {{name}} patch() => super.patch();

  Type get streamyType => {{name}};
}
