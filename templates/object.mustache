
{{#docs}}/// {{.}}
{{/docs}}
class {{name}} extends streamy.EntityWrapper {
  static final List<String> KNOWN_PROPERTIES = [
{{#properties}}    '{{name}}',
{{/properties}}  ];
{{#hasKind}}  static final String KIND = """{{kind}}""";{{/hasKind}}
  {{name}}() : super.wrap(new streamy.RawEntity(), (cloned) => new {{name}}._wrap(cloned));

  {{name}}._wrap(streamy.Entity entity) : super.wrap(entity, (cloned) => new {{name}}._wrap(cloned));

  {{name}}.wrap(streamy.Entity entity, streamy.EntityWrapperCloneFn cloneWrapper) :
      super.wrap(entity, (cloned) => cloneWrapper(cloned));

{{#properties}}
{{#docs}}  /// {{.}}
{{/docs}}
  {{type}} get {{name}} => this['{{name}}'];
  set {{name}}({{type}} value) {
    this['{{name}}'] = value;
  }
  {{type}} remove{{capName}}() => this.remove('{{name}}');
{{/properties}}

  factory {{name}}.fromJsonString(String strJson,
      {streamy.TypeRegistry typeRegistry: streamy.EMPTY_REGISTRY}) =>
          new {{name}}.fromJson(parse(strJson), typeRegistry: typeRegistry);

  static {{name}} entityFactory(Map json, streamy.TypeRegistry reg) =>
      new {{name}}.fromJson(json, typeRegistry: reg);

  factory {{name}}.fromJson(Map json,
      {streamy.TypeRegistry typeRegistry: streamy.EMPTY_REGISTRY}) {
    if (json == null) {
      return null;
    }
    json = new Map.from(json);
    var result = new {{name}}()
{{#properties}}
{{#list}}
      ..{{name}} = streamy.nullSafeMapToList(json.remove('{{name}}'), (val) => {{#mustSerialize}}new {{listType}}.fromJson(val){{/mustSerialize}}{{^mustSerialize}}{{#hasParseExpr}}streamy.nullSafeOperation({{/hasParseExpr}}val{{#hasParseExpr}}, {{parseExpr}}){{/hasParseExpr}}{{/mustSerialize}})
{{/list}}
{{^list}}
{{#mustSerialize}}
      ..{{name}} = new {{type}}.fromJson(json.remove('{{name}}'))
{{/mustSerialize}}
{{^mustSerialize}}
      ..{{name}} = {{#hasParseExpr}}streamy.nullSafeOperation({{/hasParseExpr}}json.remove('{{name}}'){{#hasParseExpr}}, {{parseExpr}}){{/hasParseExpr}}
{{/mustSerialize}}
{{/list}}
{{/properties}};
    streamy.addUnknownProperties(result, json, typeRegistry);
    return result;
  }

  Map toJson() {
    Map map = super.toJson();
{{#properties}}
{{#hasParseExpr}}
    if (map.containsKey('{{name}}')) {
      map['{{name}}'] = {{#list}}streamy.nullSafeMapToList(map['{{name}}'], (o) => o.toString()){{/list}}{{^list}}map['{{name}}'].toString(){{/list}};
    }
{{/hasParseExpr}}
{{/properties}};
    return map;
  }

  {{name}} clone() => new {{name}}._wrap(super.clone());

  Type get streamyType => {{name}};
}
