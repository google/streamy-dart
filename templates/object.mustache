
{{#docs}}/// {{.}}
{{/docs}}
class {{name}} extends streamy.EntityWrapper {
  static final Set<String> KNOWN_PROPERTIES = new Set<String>.from([
{{#properties}}    '{{name}}',
{{/properties}}  ]);
{{#hasKind}}  static final String KIND = """{{kind}}""";{{/hasKind}}
  {{name}}() : super.wrap(new streamy.RawEntity(), (cloned) => new {{name}}._wrap(cloned));
  {{name}}.fromMap(Map map) : super.wrap(new streamy.RawEntity.fromMap(map), (cloned) => new {{name}}._wrap(cloned));
  {{name}}.wrapMap(ObservableMap map) : super.wrap(new streamy.RawEntity.wrapMap(map), (cloned) => new {{name}}._wrap(cloned));

  {{name}}._wrap(streamy.Entity entity) : super.wrap(entity, (cloned) => new {{name}}._wrap(cloned));

  {{name}}.wrap(streamy.Entity entity, streamy.EntityWrapperCloneFn cloneWrapper) :
      super.wrap(entity, (cloned) => cloneWrapper(cloned));

{{#properties}}
{{#docs}}  /// {{.}}
{{/docs}}
  {{type}} get {{name}} => this['{{name}}'];
  set {{name}}({{type}} value) {
    this['{{name}}'] = value;
  }
  {{type}} remove{{capName}}() => this.remove('{{name}}');
{{/properties}}

  factory {{name}}.fromJsonString(String strJson,
      {streamy.TypeRegistry typeRegistry: streamy.EMPTY_REGISTRY}) =>
          new {{name}}.fromJson(streamy.jsonParse(strJson), typeRegistry: typeRegistry);

  static {{name}} entityFactory(Map json, streamy.TypeRegistry reg) =>
      new {{name}}.fromJson(json, typeRegistry: reg);

  factory {{name}}.fromJson(Map json,
      {streamy.TypeRegistry typeRegistry: streamy.EMPTY_REGISTRY, bool copy: false}) {
    if (json == null) {
      return null;
    }
    if (copy) {
      json = new ObservableMap.from(json);
    }
    var list;
    var len;
    var result = new {{name}}.wrapMap(json);
    var fields = result.fieldNames.toList();
{{#properties}}
{{#list}}
    list = result['{{name}}'];
    if (list != null) {
{{#mustSerialize}}
      len = list.length;
      for (var i = 0; i < len; i++) {
        list[i] = new {{listType}}.fromJson(list[i]);
      }
{{/mustSerialize}}
{{^mustSerialize}}
{{#hasParseExpr}}
      list = result['{{name}}'];
      len = list.length;
      for (var i = 0; i < len; i++) {
        list[i] = {{parseExpr}}(list[i]);
      }
{{/hasParseExpr}}
{{/mustSerialize}}
    }
{{/list}}
{{^list}}
{{#mustSerialize}}
    result.{{name}} = new {{type}}.fromJson(result['{{name}}']);
{{/mustSerialize}}
{{^mustSerialize}}
    {{#hasParseExpr}}result.{{name}} = (result['{{name}}'] != null) ? {{parseExpr}}(result['{{name}}']) : null;{{/hasParseExpr}}
{{/mustSerialize}}
{{/list}}
    fields.remove('{{name}}');
{{/properties}};
    for (var i = 0; i < fields.length; i++) {
      result[fields[i]] = streamy.deserialize(result[fields[i]], typeRegistry);
    }
    return result;
  }

  Map toJson() {
    Map map = super.toJson();
{{#properties}}
{{#hasParseExpr}}
    if (map.containsKey('{{name}}')) {
      map['{{name}}'] = {{#list}}streamy.nullSafeMapToList(map['{{name}}'], (o) => o.toString()){{/list}}{{^list}}map['{{name}}'].toString(){{/list}};
    }
{{/hasParseExpr}}
{{/properties}};
    return map;
  }

  {{name}} clone() => new {{name}}._wrap(super.clone());

  Type get streamyType => {{name}};
}
